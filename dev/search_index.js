var documenterSearchIndex = {"docs":
[{"location":"#","page":"Home","title":"Home","text":"DocTestSetup = :(using PaddyFieldAlgorithm)\nCurrentModule = PaddyFieldAlgorithm","category":"page"},{"location":"#PaddyFieldAlgorithm.jl-1","page":"Home","title":"PaddyFieldAlgorithm.jl","text":"","category":"section"},{"location":"#Contents-1","page":"Home","title":"Contents","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\n    \"regression.md\",\n    \"solution.md\",\n]","category":"page"},{"location":"solution/#Abstract-Solutions-1","page":"Solution","title":"Abstract Solutions","text":"","category":"section"},{"location":"solution/#","page":"Solution","title":"Solution","text":"PaddyFieldAlgorithm.Solution\nPaddyFieldAlgorithm.SolutionFactory\nPaddyFieldAlgorithm.distance\nPaddyFieldAlgorithm.create_solution\nPaddyFieldAlgorithm.propagate_solution","category":"page"},{"location":"solution/#PaddyFieldAlgorithm.Solution","page":"Solution","title":"PaddyFieldAlgorithm.Solution","text":"A Solution is optimized by the Paddy algorithm to maximize fitness.\n\nThis is an abstract type which is implemented by structures which provide an expression to solve a given problem (currently just regression). The method in which the fitness of a Solution is calculated is dependant on the type of problem the Solution solves (eg MSE for regression).\n\nA Solution is comprised of one or more ParameterValue s which represent how the Solution is evaluated. The algorithm attempts to modify the ParameterValue s value to optimize the fitness of the Solution.\n\n\n\n\n\n","category":"type"},{"location":"solution/#PaddyFieldAlgorithm.SolutionFactory","page":"Solution","title":"PaddyFieldAlgorithm.SolutionFactory","text":"A SolutionFactory initializes and propogates a Solution\n\nInternally, a SolutionFactory consists of Parameter s which define rules on how to create and modify ParameterValue s in a given Solution.\n\n\n\n\n\n","category":"type"},{"location":"solution/#PaddyFieldAlgorithm.distance","page":"Solution","title":"PaddyFieldAlgorithm.distance","text":"Calculates the distance between Solution s1 and Solution s2\n\nThe Paddy algorithm uses the distance between solutions to calculate the number of neighbors a given Solution has and scale the fitness value accordingly. See the pollinate function for details.\n\n\n\n\n\n","category":"function"},{"location":"solution/#PaddyFieldAlgorithm.create_solution","page":"Solution","title":"PaddyFieldAlgorithm.create_solution","text":"create_solution(sf)\n\nThis function is used to generate a random Solution.\n\nExamples\n\njulia> sf = LinearSolutionFactory();\njulia> create_solution(sf)\ny(x) = 4.403384493734293*x + -86.10091661533485\n\n\n\n\n\n","category":"function"},{"location":"solution/#PaddyFieldAlgorithm.propagate_solution","page":"Solution","title":"PaddyFieldAlgorithm.propagate_solution","text":"propagate_solution(sf, sl)\n\nCreate a new Solution from an existing Solution. Typically, the new solution is generated randomly from the old solution.\n\nExamples\n\njulia> sf = LinearSolutionFactory();\njulia> sl = create_solution(s);\njulia> propagate_solution(sf, sl)\ny(x) = 8.649846062840627*x + 52.23236375794089\n\n\n\n\n\n","category":"function"},{"location":"regression/#Regression-Solution-1","page":"Regression","title":"Regression Solution","text":"","category":"section"},{"location":"regression/#","page":"Regression","title":"Regression","text":"PaddyFieldAlgorithm.RegressionSolution\nPaddyFieldAlgorithm.LinearSolution\nPaddyFieldAlgorithm.PolynomialSolution\nPaddyFieldAlgorithm.TrigonometricSolution","category":"page"},{"location":"regression/#PaddyFieldAlgorithm.RegressionSolution","page":"Regression","title":"PaddyFieldAlgorithm.RegressionSolution","text":"A RegressionSolution attempts to fit a function to a set of points where the fitness is defined by the Mean Squared Error between the predicted y and true y\n\nfitness(xy) = -sum_i^length(x)(f(x_i) - y_i)^2\n\nWhere f is the Solution, x is a one dimensional input space, and y is the output space. Note the negative sign in the equation above which is necessary as the goal of the Paddy Field Algorithm is to maximize fitness.\n\n\n\n\n\n","category":"type"},{"location":"regression/#PaddyFieldAlgorithm.LinearSolution","page":"Regression","title":"PaddyFieldAlgorithm.LinearSolution","text":"LinearSolution contains two variables, a slope(m) and an intercept(b).\n\nIt is a regressive Solution which fits the following function: y(x) = m*x + b\n\nThe distance between a LinearSolution and a second LinearSolution is d(m_1m_2b_1b_2) = (m_1 - m_2)^2 + (b_1 - b_2)^2\n\n\n\n\n\n","category":"type"},{"location":"regression/#PaddyFieldAlgorithm.PolynomialSolution","page":"Regression","title":"PaddyFieldAlgorithm.PolynomialSolution","text":"PolynomialSolution is a regressive Solution which fits the following function: y(x) = sum_i=0^Degreec_i x^i\n\nDegree is defined by the user to be a positive integer and the distance between a PolynomialSolution and a second PolynomialSolution is d(c^1c^2) = sum_i=0^Degree(c_i^1 - c_i^2)^2\n\n\n\n\n\n","category":"type"},{"location":"regression/#PaddyFieldAlgorithm.TrigonometricSolution","page":"Regression","title":"PaddyFieldAlgorithm.TrigonometricSolution","text":"TrigonometricSolution is a regressive Solution which fits the following function: y(x) = c_0 + sum_j=1^Degree2(c_2j cos(2jπx) + c_2j+1 sin(2jπx))\n\nDegree is defined by the user to be a positive integer and the distance between a TrigonometricSolution and a second TrigonometricSolution is d(c^1c^2) = (c_0^1 - c_0^2)^2 + sum_i=1^Degree(c_i^1 - c_i^2)^2\n\n\n\n\n\n","category":"type"}]
}
